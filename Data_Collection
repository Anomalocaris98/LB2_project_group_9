{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JnUSTRo_2UEB"
      },
      "outputs": [],
      "source": [
        "import requests\n",
        "from requests.adapters import HTTPAdapter, Retry\n",
        "import json\n",
        "import re"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "retries = Retry(total=5, backoff_factor=0.25, status_forcelist=[500, 502, 503, 504])\n",
        "session = requests.Session()\n",
        "session.mount(\"https://\", HTTPAdapter(max_retries=retries))"
      ],
      "metadata": {
        "id": "5PvTl4XFvWK8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_next_link(headers):\n",
        "    if \"Link\" in headers:\n",
        "        # The regular expression is used to extract the next link for pagination\n",
        "        re_next_link = re.compile(r'<(.+)>; rel=\"next\"')\n",
        "        match = re_next_link.match(headers[\"Link\"])\n",
        "        if match:\n",
        "            return match.group(1)\n",
        "\n",
        "# This function actually retrieve the next data batch in the search.\n",
        "# The function act as an iterator, yielding the next result batch at every call\n",
        "# The function terminates after the last batch has been returned. In this case,\n",
        "# the next link will be None\n",
        "def get_batch(batch_url):\n",
        "    while batch_url:\n",
        "        # Run the API call\n",
        "        response = session.get(batch_url)\n",
        "        # Will raise an error if an error status code is obtained\n",
        "        response.raise_for_status()\n",
        "        # Get the total number of entries in the search\n",
        "        total = response.headers[\"x-total-results\"]\n",
        "        # Yield the response and the total number of entries\n",
        "        yield response, total\n",
        "        # Get the link to the API call for the next data batch\n",
        "        batch_url = get_next_link(response.headers)"
      ],
      "metadata": {
        "id": "r8griYGrvUR5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "batch_size = 500\n",
        "\n",
        "# We define a basic URL for the search.\n",
        "#POSITIVE DATASET\n",
        "# We look for all non-fragment reviewed eukaryotic proteins with signal peptide, longer than 40 residues, only with experimental SP evidence\n",
        "# The URL has been generated from the UniProtKB website, using the\n",
        "# Advanced search function, getting the API URL using the search endpoint.\n",
        "\n",
        "def filter_entry_positive(entry):\n",
        "  for feature in entry[\"features\"]:\n",
        "    if feature[\"type\"]== \"Signal\":\n",
        "      if feature[\"description\"] == \"\" : #description has to be an empty field, we just want canonical proteins. If there are descriptions then something is wrong\n",
        "        endVal = int(feature[\"location\"][\"end\"][\"value\"])\n",
        "        if endVal > 13 :\n",
        "          return True\n",
        "    return False\n",
        "\n",
        "# We set the name of the output file, we want TSV output\n",
        "#TSV for the positive dataset must include:\n",
        "#1. The protein UniProt accession\n",
        "#2. The organism name 3. The Eukaryotic kingdom (Metazoa, Fungi, Plants, Other) 4. The protein length 5. The position of the signal peptide cleavage site\n",
        "\n",
        "output_file_positive_tsv=\"euka_rev_non_frag_40res_spexp_sp>14.tsv\"\n",
        "output_file_positive_fasta=\"euka_rev_non_frag_40res_spexp_sp>14.fasta\"\n",
        "\n",
        "def extract_fields_positive(entry):\n",
        "  s, e = 0, 0\n",
        "  for f in entry[\"features\"]:\n",
        "    s=f[\"location\"][\"start\"][\"value\"]\n",
        "    e=f[\"location\"][\"end\"][\"value\"]\n",
        "    break\n",
        "  return (entry[\"primaryAccession\"],entry[\"sequence\"][\"length\"],s,e,entry[\"organism\"][\"scientificName\"],entry[\"organism\"][\"lineage\"][1])\n",
        "\n"
      ],
      "metadata": {
        "id": "FFUIqICzCPZj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "url_positive = \"https://rest.uniprot.org/uniprotkb/search?format=json&query=%28%28taxonomy_id%3A2759%29+NOT+%28length%3A%5B1+TO+40%5D%29+NOT+%28fragment%3Atrue%29+AND+%28reviewed%3Atrue%29+AND+%28ft_signal_exp%3A*%29%29&size=500\"\n",
        "url_negative= \"https://rest.uniprot.org/uniprotkb/search?format=json&query=%28%28taxonomy_id%3A2759%29+AND+%28fragment%3Afalse%29+AND+%28length%3A%5B40+TO+*%5D%29+AND+%28reviewed%3Atrue%29+NOT+%28ft_signal%3A*%29+AND+%28cc_scl_term_exp%3ASL-0091%29+OR+%28cc_scl_term_exp%3ASL-0188%29+OR+%28cc_scl_term_exp%3ASL-0173%29+OR+%28cc_scl_term_exp%3ASL-0209%29+OR+%28cc_scl_term_exp%3ASL-0204%29+OR+%28cc_scl_term_exp%3ASL-0039%29%29&size=500\"\n",
        "col_positive = [\"Accession\", \"Organism\", \"Kingdom\", \"Sequence length\", \"SP cleavage\"]\n",
        "col_negative = [\"Accession\", \"Organism\", \"Kingdom\", \"Sequence length\", \"transmembrane_term\"]\n"
      ],
      "metadata": {
        "id": "9_F2VQxxD_u6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def filter_entry_negative(entry):\n",
        "  return True\n",
        "\n",
        "\n",
        "def extract_fields_negative(entry):\n",
        "\n",
        "   transmembrane_check=False\n",
        "   for char in entry[\"features\"]:\n",
        "     if char[\"type\"]==\"Transmembrane\":\n",
        "       if re.search(\"Helical\",char[\"description\"]):\n",
        "            if char[\"location\"][\"start\"][\"value\"]<=90:\n",
        "              transmembrane_check=True\n",
        "              break\n",
        "\n",
        "   return (entry[\"primaryAccession\"],entry[\"sequence\"][\"length\"],entry[\"organism\"][\"scientificName\"],entry[\"organism\"][\"lineage\"][1],transmembrane_check)\n",
        "\n"
      ],
      "metadata": {
        "id": "rrIK1pKoKATy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def get_dataset(search_url, filter_function, extract_function,columns, output_file_name, output_fasta_file_name):\n",
        "    n_total, n_filtered = 0, 0\n",
        "    # Run the API call in batches\n",
        "    with open(output_file_name, 'w') as ofs:\n",
        "      print(*columns,sep=\"\\t\", file=ofs)\n",
        "      with open(output_fasta_file_name, 'w') as ofs_fasta:\n",
        "        for batch, total in get_batch(search_url):\n",
        "          batch_json = json.loads(batch.text)\n",
        "           # filter the entries\n",
        "          for entry in batch_json[\"results\"]:\n",
        "            n_total += 1\n",
        "            # Check if the entry passes the filter\n",
        "            if filter_function(entry):\n",
        "              n_filtered += 1\n",
        "              fields = extract_function(entry)\n",
        "              print(*fields, sep=\"\\t\", file=ofs)\n",
        "              print(\">\", entry[\"primaryAccession\"], sep=\"\", file=ofs_fasta)\n",
        "              print(entry[\"sequence\"][\"value\"], file=ofs_fasta)\n",
        "        ofs_fasta.close()\n",
        "      ofs.close\n",
        "    print(f\"Total: {n_total}, filtered: {n_filtered}\")\n"
      ],
      "metadata": {
        "id": "NVmc-nGtB1GS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "get_dataset(url_positive, filter_entry_positive, extract_fields_positive,col_positive, \"positive_dataset.tsv\",\"positive_dataset.fasta\")"
      ],
      "metadata": {
        "id": "cCu40KU2-X28",
        "outputId": "3c04399d-536a-449c-a2ed-7ec42e1e820f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Total: 2949, filtered: 2932\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "get_dataset(url_negative, filter_entry_negative, extract_fields_negative,col_negative, \"negative_dataset.tsv\",\"negative_dataset.fasta\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4NePwM8SGWfC",
        "outputId": "696943c2-43be-42b0-bbc6-ee0162f919bd"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Total: 21370, filtered: 21370\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "negative_set = pd.read_csv(\"negative_dataset.tsv\", sep=\"\\t\")\n",
        "positive_set = pd.read_csv(\"positive_dataset.tsv\", sep=\"\\t\")\n",
        "\n",
        "print(len(positive_set), \"All positives. \")\n",
        "print(len(negative_set), \"All negatives. \")\n",
        "print(len(negative_set[negative_set[\"transmembrane_term\"] == True]), \"Negatives with transmembrane within the first 90 residues. \")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MP1O8QF2PYTL",
        "outputId": "353be5f6-c668-463f-f22f-dd98f12f28a1"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2932 All positives. \n",
            "21370 All negatives. \n",
            "4105 Negatives with transmembrane within the first 90 residues. \n"
          ]
        }
      ]
    }
  ]
}